# -*- mode: python -*-

# scons file for tcp3jointer

import os
import sys

#######################################
# Environment settings
#######################################
# options
AddOption("--extrapath",
          dest="extrapath",
          type="string",
          nargs=1,
          action="store",
          help="comma separated list of add'l paths  (--extrapath /opt/foo/,/foo) static linking")

AddOption("--prefix",
          dest="prefix",
          type="string",
          nargs=1,
          action="store",
          default="/usr/local",
          help="installation root")
          
env = Environment(BUILD_DIR='#build',
                  CLIENT_SCONSTRUCT='#SConstruct',
                  MSVS_ARCH=None,
                  PYTHON=sys.executable)

def addExtraLibs(s):
    for x in s.split(","):
        if os.path.exists(x):
            env.Append(CPPPATH=[x + "/include", x],
                       LIBPATH=[x + "/lib", x + "/lib64"])

if GetOption( "extrapath" ) is not None:
    addExtraLibs( GetOption( "extrapath" ) )

env.Prepend(CPPPATH=["$BUILD_DIR"])

nix = False
linux = False
win = False

if "darwin" == sys.platform:
    addExtraLibs( "/opt/local/" )
    nix = True
elif sys.platform in ("linux2", "linux3"):
    nix = True
    linux = True
elif sys.platform == 'win32':
    win = True

if win:
    env.Append(CCFLAGS=['/EHsc', '/O2'])
if nix:
    env.Append(CCFLAGS=["-O3", "-pthread", "-g"])
if linux:
    env.Append(LINKFLAGS=["-Wl,--as-needed", "-Wl,-zdefs", "-pthread", "-g"])

conf = Configure(env)
# Check boost libraries
boostLibs = ["thread", "filesystem", "system"]
for lib in boostLibs:
    if not conf.CheckLib(["boost_%s-mt" % lib, "boost_%s" % lib],
                         language="C++"):
        if not win:
            print "ERROR: Could not find boost libraries. Exit."
            Exit(1)
# Check mongo CXX driver
mongoHeaders = ["mongo/client/dbclient.h"]
if not conf.CheckCXXHeader(mongoHeaders):
    if not win:
        print "ERROR: Could not find %s" % mongoHeaders[0]
        Exit(1)
if not conf.CheckLib("mongoclient", language="C++"):
    if not win:
        print "ERROR: Could not find mongoclient libraries (C++ mongo drivers needed)."
        Exit(1)
conf.Finish()

# install
env.Alias("install", GetOption('prefix'))

#######################################
# Program settings
#######################################

sourceDirectory = ["."]

headerFiles = []
for path in sourceDirectory:
    headerFiles.extend(Glob('%s/*.h' % path))
    headerFiles.extend(Glob('%s/*.hpp' % path))
    
sourceFiles = []
for path in sourceDirectory:
    sourceFiles.extend(Glob('%s/*.cpp' % path))


env.Program('#tcp3jointer', sourceFiles)


